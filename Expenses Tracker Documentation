

# Expense Tracker Documentation

## Introduction
This Python program is a simple **Expense Tracker** that allows users to: - **Add expenses** with details like amount, description, category, and date. - **View all recorded expenses** in a neat format. - **Summarize expenses by category** to see how much has been spent on each. - **Save data to a JSON file** (`expenses.json`) for persistent storage.

## Features
1. **Add Expense** - Prompts the user for the amount, description, category, and date (YYYY-MM-DD). - Validates the date format. - Saves the expense to `expenses.json`. 2. **View All Expenses** - Displays all recorded expenses, showing date, category, description, and amount. 3. **Category Summary** - Summarizes expenses by category. 4. **Exit** - Ends the program.

## Functions

### 1. `load_data()`
**Purpose:** Loads expenses from `expenses.json`. **Returns:** A list of expense records. **Error Handling:** If the file doesn't exist or is empty, returns an empty list.

### 2. `save_data(expenses)`
**Purpose:** Saves the current list of expenses to `expenses.json`. **Parameters:** - `expenses` (list): A list of expense dictionaries to be saved. **File Handling:** Overwrites `expenses.json` with the new data.

### 3. `add_expense(amount, description, category, date=None)`
**Purpose:** Adds a new expense to the data. **Parameters:** - `amount` (float or str): The expense amount. - `description` (str): A short description of the expense. - `category` (str): The category (e.g., Food, Transport). - `date` (str, optional): The date of the expense (YYYY-MM-DD). Prompts user if not provided. **Validation:** Ensures the date format is correct. **Actions:** Appends the new expense to the list. Calls `save_data()` to store the updated list.

### 4. `view_expenses()`
**Purpose:** Displays all recorded expenses. **Actions:** Loads expenses using `load_data()`. Iterates through the list and prints each expense with: - Index - Date - Category - Description - Amount (formatted to 2 decimal places) If no expenses are found, displays an appropriate message.

### 5. `category_summary()`
**Purpose:** Displays a summary of expenses grouped by category. **Actions:** Loads expenses using `load_data()`. Calculates the total amount for each category. Prints each category with its total spend. If no expenses are found, displays an appropriate message.

### 6. `main()`
**Purpose:** Provides the main interactive menu. **Options:** - 1: Add Expense - 2: View All Expenses - 3: Category Summary - 4: Exit **Actions:** Calls the appropriate function based on user input. Handles invalid inputs gracefully.

## JSON File (`expenses.json`)
**Structure:**
```json
[
    {
        "amount": 50.75,
        "description": "Groceries",
        "category": "Food",
        "date": "2025-03-10"
    },
    {
        "amount": 20.00,
        "description": "Bus Ticket",
        "category": "Transport",
        "date": "2025-03-09"
    }
]
```
**Usage:** Each record is a JSON object with `amount`, `description`, `category`, and `date`.

## How to Run
**Step 1:** Save the code to a file, e.g., `expense_tracker.py`. **Step 2:** Ensure `expenses.json` is in the same directory (create an empty file if necessary). **Step 3:** Run the program:
```bash
python expense_tracker.py
```
**Step 4:** Follow the on-screen prompts to add/view/summarize expenses.

## Future Enhancements
Consider adding: - **Monthly summaries**. - **Search functionality** by date or description. - **Data export** to CSV or Excel. - **GUI interface** using Tkinter.

## Conclusion
This Expense Tracker is a simple yet powerful tool for managing your spending, with a focus on usability and data persistence through JSON files. Further customizations can enhance its functionality!


